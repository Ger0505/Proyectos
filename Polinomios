#include <stdio.h>
#include <stdlib.h>
#define Nodo struct nodo
#define List struct lista
Nodo{
	int coeficiente;
	int exponente;
	int signo;
	Nodo*siguiente;
};

List{
	Nodo*inicio;
	Nodo*final;
};

void insertarMonomio(List*lista);
void visualizarVista(List nlista);
Nodo*nuevoElemento();
void unir(List*lista1,List*lista2);
void simplificar(List*lista1);
void ordenar(List lista);
void cambiarSigno(List*lista);

void multiplicar(List lista1,List lista2);
Nodo*buscarAuxiliar(List*lista,Nodo*aux);
Nodo*nuevoNodo(Nodo*aux1,Nodo*aux2);
Nodo*buscarFinal(List*lista);
void eliminarYagregar(List*lista1,List*lista2);

int main(){
	List Lista1,Lista2,resultado;
	Lista1.inicio=Lista1.final=NULL;
	Lista2.inicio=Lista2.final=NULL;
	resultado.inicio=resultado.final=NULL;
	int Num,i,Ope;
	printf("Polinomios con una sola literal\n");
	printf("El coeficiente puede ser positivo o negativo\n");
		printf("-----------\n");
	printf("Operacion\n");
	printf("1. Suma\n");
	printf("2. Resta\n");
	printf("3. Multiplicacion\n");
	do{
		printf("Escoger Operacion (1-3):");
		scanf("%i",&Ope);
	}while(Ope<1 | Ope>3);
	printf("-----------\n");
	do{
		printf("Primer polinomio\n");
		printf("No. de monomios:");
		scanf("%i",&Num);
	}while(Num<1);
	for(i=0;i<Num;i++){
		insertarMonomio(&Lista1);
	}
	printf("\n");
	printf("Segundo polinomio\n");
	do{
		printf("No. de monomios:");
		scanf("%i",&Num);
	}while(Num<1);
	for(i=0;i<Num;i++){
		insertarMonomio(&Lista2);
	}
	printf("\n");
	printf("Polinomio 1:");
	visualizarVista(Lista1);
	printf("\n");
	printf("Polinomio 2:");
	visualizarVista(Lista2);
	if(Ope==1 | Ope==2){
		if(Ope==2){
		cambiarSigno(&Lista2);
	    }
	    unir(&Lista1,&Lista2);
	    simplificar(&Lista1);
	    printf("\n");
	    ordenar(Lista1);
	}else{
		simplificar(&Lista1);
		simplificar(&Lista2);
		multiplicar(Lista1,Lista2);
	}
}


void ordenar(List lista){
	if(lista.inicio!=NULL){
		Nodo*pivote=lista.inicio;
		Nodo*apivote=NULL;
		Nodo*aux=lista.inicio->siguiente;
		Nodo*max=lista.inicio;
		Nodo*ant=lista.inicio;
		while(pivote!=NULL){
			while(aux!=NULL){
				if(aux->exponente>max->exponente){
					ant->siguiente=aux->siguiente;
					aux->siguiente=pivote;
					if(pivote==lista.inicio){
						lista.inicio=aux;
					}else{
						apivote->siguiente=aux;
					}
					max=aux;
					pivote=aux;
					aux=ant->siguiente;
				}else{
					aux=aux->siguiente;
					ant=ant->siguiente;
				}
			}
			apivote=pivote;
			pivote=pivote->siguiente;
			max=max->siguiente;
			if(pivote==NULL){
				aux=NULL;
			}else{
				aux=pivote->siguiente;
			}
			ant=pivote;
		}
	}
	printf("Resultado:");
	visualizarVista(lista);
}

void simplificar(List*lista){
	if(lista!=NULL){
		Nodo*pivote=lista->inicio;
		Nodo*aux=lista->inicio->siguiente;
		Nodo*ant=lista->inicio;
		if(aux!=NULL){
			while(pivote!=NULL){
			while(aux!=NULL){
				if(aux->exponente==pivote->exponente){
					pivote->coeficiente=pivote->coeficiente+aux->coeficiente;
					if(pivote->coeficiente<0){
						pivote->signo=45;
					}else{
						pivote->signo=43;
					}
					if(aux==lista->final){
						lista->final=ant;
					}else{
						ant->siguiente=aux->siguiente;
					}
					free(aux);
					aux=ant->siguiente;
				}else{
					aux=aux->siguiente;
				    ant=ant->siguiente;
				}
			}
			pivote=pivote->siguiente;
			if(pivote==NULL){
			aux=ant=NULL;	
			}else{
				aux=pivote->siguiente;
		    	ant=pivote;
			}
		}
		}
	}
}

void unir(List*lista1,List*lista2){
	Nodo*aux;
	if(lista2->inicio!=NULL){
		aux=lista2->inicio;
		while(lista2->inicio!=NULL){
			lista2->inicio=lista2->inicio->siguiente;
			aux->siguiente=lista1->inicio;
			lista1->inicio=aux;
		    aux=lista2->inicio;
	    }
	}
}


void insertarMonomio(List*lista){
	Nodo*nuevo=nuevoElemento();
	if(lista==NULL){
		lista->inicio=nuevo;
		lista->final=nuevo;
	}else{
		nuevo->siguiente=lista->inicio;
		lista->inicio=nuevo;
	}
}

Nodo*nuevoElemento(){
	int coeficiente,exponente;
	Nodo*q=(Nodo*)malloc(sizeof(Nodo));
	printf("Coeficiente:");
	scanf("%i",&q->coeficiente);
	if(q->coeficiente<0){
		q->coeficiente=q->coeficiente;
		q->signo=45;
	}else{
		q->signo=43;
	}
	printf("Exponente:");
	scanf("%i",&q->exponente);
	q->siguiente=NULL;
	return q;
}

void visualizarVista(List nlista){
	if(nlista.inicio!=NULL){
		Nodo* aux=nlista.inicio;
		while(aux!=NULL){
			if(aux->coeficiente!=0){
					if(aux!=nlista.inicio){
				printf("%c",aux->signo);
			}else if(aux->signo==45){
			    printf("%c",aux->signo);
			}
			if(aux->coeficiente!=1 && aux->coeficiente!=-1){
				if(aux->coeficiente<0){
					printf("%i",aux->coeficiente*-1);
				}else{
					printf("%i",aux->coeficiente);
				}
			}else if(aux->exponente==0){
				if(aux->coeficiente<0){
					printf("%i",aux->coeficiente*-1);
				}else{
					printf("%i",aux->coeficiente);
				}
			}
			if(aux->exponente!=1){
				if(aux->exponente!=0){
					printf("x^");
		    	printf("%i",aux->exponente);
		    }
		    
			}else{
				printf("x");
			}
			}
			aux=aux->siguiente;
		}
    }
}

void cambiarSigno(List*lista){
	if(lista!=NULL){
		Nodo*aux=lista->inicio;
		while(aux!=NULL){
			aux->coeficiente=aux->coeficiente*-1;
			if(aux->coeficiente<0){
				aux->signo=45;
			}else{
				aux->signo=43;
			}
			aux=aux->siguiente;
		}
	}
}

void multiplicar(List lista1,List lista2){
	Nodo*aux2=buscarFinal(&lista2);
	List multiplo,resultado;
	multiplo.inicio=resultado.inicio=NULL;
	multiplo.final=resultado.final=NULL;
	while(aux2!=NULL){
		Nodo*aux1=buscarFinal(&lista1);
		while(aux1!=NULL){
		Nodo*nuevo=nuevoNodo(aux1,aux2);
		if(multiplo.inicio==NULL){
			multiplo.inicio=nuevo;
			multiplo.final=nuevo;
		}else{
			nuevo->siguiente=multiplo.inicio;
			multiplo.inicio=nuevo;
		}
		aux1=buscarAuxiliar(&lista1,aux1);
	    }
	    
	    eliminarYagregar(&multiplo,&resultado);
	    aux2=buscarAuxiliar(&lista2,aux2);
	}
	simplificar(&resultado);
	printf("\n");
	printf("Resultado:");
	ordenar(resultado);
}

Nodo*nuevoNodo(Nodo*aux1,Nodo*aux2){
	Nodo*nuevo=(Nodo*)malloc(sizeof(Nodo));
	nuevo->coeficiente=aux1->coeficiente*aux2->coeficiente;
	nuevo->exponente=aux1->exponente+aux2->exponente;
	if(nuevo->coeficiente>0){
		nuevo->signo=43;
	}else{
		nuevo->signo=45;
	}
	nuevo->siguiente=NULL;
	return nuevo;
}

Nodo*buscarAuxiliar(List*lista,Nodo*aux){
	 Nodo*prev;
	if(lista->inicio!=NULL){
		if(aux!=lista->inicio){
		  prev=lista->inicio;
		  while(prev->siguiente!=aux){
		  prev=prev->siguiente;
		  }
		}else{
			prev=NULL;
		}
	}
	return prev;
}

Nodo* buscarFinal(List *lista){
	Nodo*aux;
	if(lista->inicio!=NULL){
		aux=lista->inicio;
		while(aux->siguiente!=NULL){
			aux=aux->siguiente;
		}
	}
	return aux;
}

void eliminarYagregar(List*lista1,List*lista2){
	Nodo*aux=lista1->inicio;
	while(aux!=NULL){
		lista1->inicio=lista1->inicio->siguiente;
		aux->siguiente=NULL;
		if(lista2==NULL){
			lista2->inicio=aux;
			lista2->final=aux;
		}else{
			aux->siguiente=lista2->inicio;
			lista2->inicio=aux;
		}
		aux=lista1->inicio;
	}
}
