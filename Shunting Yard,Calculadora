//(20*(10-1)+11)^2-80
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
typedef struct nodo Nodo;
typedef Nodo *pelemento;
struct nodo{
	int  dato;
	pelemento siguiente;
};
typedef struct listadoble ListDob;
struct listadoble{
	pelemento inicio;
	pelemento final;
};
pelemento inicio=NULL;
pelemento final=NULL;

void insertar(ListDob *list,int dato);
void visualizarVista(ListDob nlista);
void visualizarVistaAux(ListDob nlista);
pelemento nuevoElemento(int dato);
int eliminarNodo(ListDob*lista);
void insertarI(ListDob *list,int dato);
int comparar(int esperar,int inicio);
void resolver(ListDob *lista);
int Operacion(int Ope,int a,int b);
void agrupar(ListDob*lista);

int main(){
	ListDob Lista1,Stack,Final,resultado;
	char texto[100],*palabra;
	int i,len,dato,nuevo;
	pelemento COMP;
	Lista1.inicio=Lista1.final=NULL;
	Stack.inicio=Stack.final=NULL;
	Final.inicio=Final.final=NULL;
	resultado.inicio=resultado.final=NULL;
	printf("NOTA: La division devuelve el valor entero de la division\n");
	printf("Simbolos Operando Validos: + - * / ^ ( )\n");
	printf("Operacion Aritmetrica:");
	scanf("%s",&texto);
	len=strlen(texto);
	palabra=malloc(len*sizeof(char));
	strcpy(palabra,texto);
	for(i=0;i<len;i++){
		nuevo=palabra[i];
		if(nuevo>=48 && nuevo<=57){
			nuevo=palabra[i]-'0';
			insertar(&Lista1,nuevo);
		}else{
		    insertar(&Lista1,nuevo);	
		}
	}
	agrupar(&Lista1);
	pelemento espera=Lista1.inicio;
	while(espera!=NULL){       ////////////////////////////////////////////////////////////////////////////////////////////
		if(espera->dato==42|espera->dato==43|espera->dato==45|espera->dato==47|espera->dato==94|espera->dato==40|espera->dato==41){
			if(espera->dato!=41){
				if(Stack.inicio!=NULL){
				while(comparar(espera->dato,Stack.inicio->dato)!=0){
					insertar(&Final,eliminarNodo(&Stack));
					COMP=Stack.inicio;
					if(COMP==NULL){
						break;
					}
			    }
				}
				insertarI(&Stack,espera->dato);
			}else{
				while(Stack.inicio->dato!=40){
					insertar(&Final,eliminarNodo(&Stack));
				}
				eliminarNodo(&Stack);
			}
		}else{
			insertar(&Final,espera->dato);
		}
		espera=espera->siguiente;
	}
	free(espera);
	while(Stack.inicio!=NULL){
		insertar(&Final,eliminarNodo(&Stack));
	}
	printf("\n");
	printf("RPN:");
    visualizarVista(Final);
    printf("\n");
    while(Final.inicio!=NULL){
    		pelemento aux=Final.inicio;
    	if(aux->dato==42| aux->dato==43|aux->dato==45|aux->dato==47|aux->dato==94){
    		int b=eliminarNodo(&resultado);
			int a=eliminarNodo(&resultado);
			insertarI(&resultado,Operacion(eliminarNodo(&Final),a,b));
	    }else{
	    	insertarI(&resultado,eliminarNodo(&Final));
		}
	}
	printf("Resultado:");
   visualizarVistaAux(resultado);
}

void insertar(ListDob *list,int dato){
	pelemento nuevo=nuevoElemento(dato);
	if(list->inicio==NULL && list->final==NULL){
		list->inicio=nuevo;
		list->final=nuevo;
	}else{
		list->final->siguiente=nuevo;
		list->final=nuevo;
	}
}

void insertarI(ListDob *list,int dato){
	pelemento nuevo=nuevoElemento(dato);
	if(list->inicio==NULL && list->final==NULL){
		list->inicio=nuevo;
		list->final=nuevo;
	}else{
		nuevo->siguiente=list->inicio;
		list->inicio=nuevo;
	}
}

void visualizarVistaAux(ListDob nlista){
	if(nlista.inicio!=NULL){
		pelemento aux=nlista.inicio;
		while(aux!=NULL){
			printf("%i ",aux->dato);
			aux=aux->siguiente;
		}
    }
}
void visualizarVista(ListDob nlista){
	if(nlista.inicio!=NULL){
		pelemento aux=nlista.inicio;
		while(aux!=NULL){
			if(aux->dato!=42 && aux->dato!=43 && aux->dato!=45 && aux->dato!=47 && aux->dato!=94){
				printf("%i ",aux->dato);
			}else{
				printf("%c ",aux->dato);
			}
			aux=aux->siguiente;
		}
    }
}

pelemento nuevoElemento(int dato){
	pelemento q=(pelemento)malloc(sizeof(Nodo));
	q->dato=dato;
	q->siguiente=NULL;
	return q;
}

int eliminarNodo(ListDob*lista){
    pelemento aux=lista->inicio;
    int dato=aux->dato;
      lista->inicio=lista->inicio->siguiente;
      free(aux);
      return dato;
}
// (Z*(K-W)+X)^Y-T
int comparar(int esperar,int inicio){
	int verificar;
	if((esperar==42 | esperar==47 | esperar==43 | esperar==45 ) && (inicio==94)){
		verificar=1;
	}else if((esperar==43 | esperar==45) && (inicio==42 | inicio==47)){
		verificar=1;
	}else{
		verificar=0;
	}
	return verificar;
}

int Operacion(int Ope,int a,int b){
	int dd;
		switch(Ope){
				case 42:
					dd=a*b;
					break;
				case 43:
					dd=a+b;
					break;
				case 45:
					dd=a-b;
					break;
				case 47:
					dd=a/b;
					break;
				case 94:
					dd=pow(a,b);
					break;
		}
	return dd;
}

void agrupar(ListDob*lista){
	if(lista->inicio!=NULL){
		pelemento aux=lista->inicio;
		pelemento next=NULL;
		while(aux!=NULL){
			if(aux->dato>=0 && aux->dato<=9){
				next=aux->siguiente;
			    if(next!=NULL){
			    	if(next->dato>=0 && next->dato<=9){
				  aux->dato=aux->dato*10+next->dato;
				  if(next!=lista->final){
				  	aux->siguiente=next->siguiente;
				  }else{
				  	 lista->final=aux;
				  	 lista->final->siguiente=NULL;
				  }
				   free(next);
				}else{
					aux=aux->siguiente;
				}
				}else{
					aux=aux->siguiente;
				}
			}else{
				aux=aux->siguiente;
			}
		}
		}
	}
